{"version":3,"sources":["webpack:///./lib/minesweeper.js"],"names":["playing","newGame","bubble","document","querySelector","row","col","table","i","insertAdjacentHTML","querySelectorAll","forEach","r","j","generateTiles","bombs","Math","round","bombsRatio","getRandomInt","min","max","ceil","floor","random","minesArray","tilesArray","Array","fill","createTilesArray","r2","createMinesArray","indexTile","tile","parentElement","rowIndex","cellIndex","changeClass","name","remove","classList","add","tdAll","getElementById","checkIfBombOnTile","b","checkNextTile","nextTile","rows","cells","contains","checkTileAndNeighbours","indexArray","checkNeighbouringBombs","time","timer","updateTimer","innerHTML","flagsLeftCounter","flagsLeft","updateFlagsCounter","addEventListener","event","preventDefault","_event","innerText","setInterval","won","checkIfWon"],"mappings":"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","file":"main.js","sourcesContent":["let playing = false;\nlet newGame = true;\n\n// Speech bubble\nconst bubble = document.querySelector(\"#message\");\n\n// Generate tiles\nconst numTilesRow = 15;\nconst numTilesCol = 15;\n\nconst generateTiles = (row, col) => {\n  const table = document.querySelector(\"#minesweeper\");\n\n  for (let i = 0; i < row; i += 1) {\n    table.insertAdjacentHTML(\"beforeend\", '<tr></tr>');\n  }\n\n  const tr = document.querySelectorAll(\"tr\");\n\n  tr.forEach((r) => {\n    for (let j = 0; j < col; j += 1) {\n      r.insertAdjacentHTML(\"beforeend\", '<td class=\"unopened\"></td>');\n    }\n  });\n};\n\ngenerateTiles(numTilesRow, numTilesCol);\n\n// set number of bombs\nconst bombsRatio = 0.1;\nconst bombs = Math.round(bombsRatio * (numTilesCol * numTilesRow));\n\n// create grid/tiles array\nconst createTilesArray = () => {\n  const tilesArray = [];\n  for (let i = 0; i < numTilesRow; i += 1) {\n    tilesArray[i] = new Array(numTilesCol).fill(0);\n  }\n  return tilesArray;\n};\n\n// create  random  integer\nconst getRandomInt = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  // The maximum is exclusive and the minimum is inclusive\n  return Math.floor(Math.random() * (max - min) + min);\n};\n\n// place bombs randomly in grid 2d array\nconst createMinesArray = () => {\n  const minesArray = createTilesArray();\n  let j = 0;\n  let r;\n  let r2;\n  while (j < bombs) {\n    r = getRandomInt(0, numTilesRow);\n    r2 = getRandomInt(0, numTilesCol);\n    if (minesArray[r][r2] !== 1) {\n      minesArray[r][r2] = 1;\n      j += 1;\n    }\n  }\n  return minesArray;\n};\n\nconst minesArray = createMinesArray();\n\n// index the tile\nconst indexTile = (tile) => {\n  const rowIndex = tile.parentElement.rowIndex;\n  const cellIndex = tile.cellIndex;\n  return [rowIndex, cellIndex];\n};\n\n// add and remove class name\nconst changeClass = (tile, name, remove) => {\n  tile.classList.add(name);\n  tile.classList.remove(remove);\n};\n\n\n// Select all tiles\nconst tdAll = document.querySelectorAll(\"td\");\nconst table = document.getElementById('minesweeper');\n\n\n// Show all mines when game over\nconst addBombsWhenGameOver = () => {\n  tdAll.forEach((tile) => {\n    const indexArray = indexTile(tile);\n    const row = indexArray[0];\n    const col = indexArray[1];\n\n    if (minesArray[row][col] === 1) {\n      changeClass(tile, \"mine\", \"unopened\");\n    }\n  });\n};\n\n// Add flags to all mines when won\nconst addFlagsWhenWon = () => {\n  tdAll.forEach((tile) => {\n    const indexArray = indexTile(tile);\n    const row = indexArray[0];\n    const col = indexArray[1];\n\n    if (minesArray[row][col] === 1) {\n      changeClass(tile, \"flagged\", \"unopened\");\n    }\n  });\n};\n\n\nconst checkIfBombOnTile = (row, col, b) => {\n  // Does tile exist?\n  if (minesArray[row] && minesArray[row][col]) {\n    if (minesArray[row][col] === 1) {\n      b += 1;\n    }\n  }\n  return b;\n};\n\n\nconst checkNeighbouringBombs = (tile) => {\n  const indexArray = indexTile(tile);\n  const row = indexArray[0];\n  const col = indexArray[1];\n  let b = 0;\n\n  b = checkIfBombOnTile(row, col - 1, b);\n  b = checkIfBombOnTile(row, col + 1, b);\n  b = checkIfBombOnTile(row - 1, col, b);\n  b = checkIfBombOnTile(row + 1, col, b);\n  b = checkIfBombOnTile(row + 1, col + 1, b);\n  b = checkIfBombOnTile(row - 1, col + 1, b);\n  b = checkIfBombOnTile(row + 1, col - 1, b);\n  b = checkIfBombOnTile(row - 1, col - 1, b);\n\n  changeClass(tile, `mine-neighbour-${b}`, \"unopened\");\n\n  if (b === 0) {\n    changeClass(tile, \"opened\", \"unopened\");\n    return true;\n  }\n};\n\nconst checkNextTile = (row, col) => {\n  if (typeof minesArray[row] !== 'undefined' && typeof minesArray[row][col] !== 'undefined') {\n    const nextTile = table.rows[row].cells[col];\n    if (nextTile.classList.contains(\"unopened\") && !nextTile.classList.contains(\"flagged\")) {\n      checkTileAndNeighbours(nextTile);\n    }\n  }\n};\n\nconst checkTileAndNeighbours = (tile) => {\n  const indexArray = indexTile(tile);\n  const row = indexArray[0];\n  const col = indexArray[1];\n  const noBombNeighbours = checkNeighbouringBombs(tile);\n  if (noBombNeighbours === true) {\n    checkNextTile(row, col - 1);\n    checkNextTile(row, col + 1);\n    checkNextTile(row - 1, col);\n    checkNextTile(row + 1, col);\n    checkNextTile(row + 1, col + 1);\n    checkNextTile(row - 1, col + 1);\n    checkNextTile(row + 1, col - 1);\n    checkNextTile(row - 1, col - 1);\n  }\n};\n\n\nlet time = 1;\nconst timer = document.querySelector(\"#timer\");\n\nconst updateTimer = () => {\n  if (playing === false) {\n    return false;\n  }\n  if (time < 10) {\n    timer.innerHTML = `00${time}`;\n  } else if (time < 100) {\n    timer.innerHTML = `0${time}`;\n  } else if (time < 1000) {\n    timer.innerHTML = `${time}`;\n  }\n  time += 1;\n};\n\nconst startTimer = () => {\n  setInterval(updateTimer, 1000);\n};\n\n\n// bombs left counter\nconst flagsLeftCounter = document.querySelector(\"#bombs-left\");\nlet flagsLeft = bombs;\n\nconst setFlagsCounter = () => {\n  if (bombs < 10) {\n    flagsLeftCounter.innerHTML = `00${bombs}`;\n  } else if (bombs < 100) {\n    flagsLeftCounter.innerHTML = `0${bombs}`;\n  } else {\n    flagsLeftCounter.innerHTML = `${bombs}`;\n  }\n};\n\nsetFlagsCounter();\n\nconst updateFlagsCounter = () => {\n  if (flagsLeft > -1) {\n    if (flagsLeft < 10) {\n      flagsLeftCounter.innerHTML = `00${flagsLeft}`;\n    } else if (flagsLeft < 100) {\n      flagsLeftCounter.innerHTML = `0${flagsLeft}`;\n    } else if (flagsLeft < 1000) {\n      flagsLeftCounter.innerHTML = `${flagsLeft}`;\n    }\n  } else if (flagsLeft < 0) {\n    if (flagsLeft > -10) {\n      flagsLeftCounter.innerHTML = `-0${-1 * flagsLeft}`;\n    } else {\n      flagsLeftCounter.innerHTML = `-${-1 * flagsLeft}`;\n    }\n  }\n};\n\nconst checkIfWon = () => {\n  let won = true;\n\n  tdAll.forEach((tile) => {\n    const indexArray = indexTile(tile);\n    const row = indexArray[0];\n    const col = indexArray[1];\n\n    if ((tile.classList.contains(\"unopened\") || tile.classList.contains(\"flagged\")) && minesArray[row][col] !== 1) {\n      won = false;\n      return won;\n    }\n  });\n  return won;\n};\n\n\ntdAll.forEach((tile) => {\n  // right click event listener\n  tile.addEventListener(\"contextmenu\", (event) => {\n    event.preventDefault();\n\n    // if tile contains flag already, remove the flag\n    if (playing || newGame) {\n      if (tile.classList.contains(\"flagged\")) {\n        changeClass(tile, \"unopened\", \"flagged\");\n        flagsLeft += 1;\n        updateFlagsCounter();\n        // if its unopened without flag, add flag\n      } else if (tile.classList.contains(\"unopened\")) {\n        changeClass(tile, \"flagged\", \"unopened\");\n        flagsLeft -= 1;\n        updateFlagsCounter();\n      }\n    }\n  }, false);\n\n  // mouse down event listener\n  tile.addEventListener(\"mousedown\", (_event) => {\n    if (tile.classList.contains(\"unopened\") && (playing || newGame)) {\n      bubble.innerText = \"Hmm..\";\n    }\n  });\n\n  // mouse up event listener\n  tile.addEventListener(\"mouseup\", (_event) => {\n    if (tile.classList.contains(\"unopened\") && (playing || newGame)) {\n      bubble.innerText = \"Choose a tile\";\n    }\n  });\n\n  // left click event listener\n  tile.addEventListener(\"click\", (event) => {\n    event.preventDefault();\n\n    if (newGame) {\n      if (!playing) {\n        startTimer();\n      }\n      playing = true;\n\n      // check if tiles is a bomb\n      const indexArray = indexTile(tile);\n      const row = indexArray[0];\n      const col = indexArray[1];\n      if (minesArray[row][col] === 1 && !tile.classList.contains(\"flagged\")) {\n        addBombsWhenGameOver();\n        bubble.innerText = \"Game over!\";\n        timer.classList.add(\"bounce-effect\");\n        timer.classList.add(\"bg-red\");\n        playing = false;\n        newGame = false;\n      } else if (tile.classList.contains(\"unopened\") && !tile.classList.contains(\"flagged\")) {\n        checkTileAndNeighbours(tile);\n\n        if (checkIfWon()) {\n          addFlagsWhenWon();\n          bubble.innerText = \"You won!\";\n          timer.classList.add(\"bounce-effect\");\n          timer.classList.add(\"bg-blue\");\n          playing = false;\n          newGame = false;\n        }\n      }\n    }\n  });\n});\n"],"sourceRoot":""}