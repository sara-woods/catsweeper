{"version":3,"sources":["webpack:///./lib/minesweeper.js"],"names":["playing","newGame","bubble","document","querySelector","table","numTilesRow","numTilesCol","window","screen","width","row","col","i","insertAdjacentHTML","querySelectorAll","forEach","r","j","generateTiles","tdAll","cats","Math","round","getRandomInt","minimum","maximum","min","ceil","max","floor","random","catsArray","tilesArray","Array","fill","createTilesArray","indexTile","tile","parentElement","rowIndex","cellIndex","changeClass","name","remove","classList","add","checkIfCatOnTile","b","catCounter","checkTileAndNeighbours","checkNextTile","nextTile","rows","cells","contains","indexArray","checkForNeighbouringCats","time","timer","updateTimer","innerHTML","flagsLeftCounter","flagsLeft","updateFlagsCounter","addEventListener","event","preventDefault","_event","innerText","setInterval","firstTile","c","createCatsArray","won"],"mappings":"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","file":"main.js","sourcesContent":["let playing = false;\nlet newGame = true;\n\n// Speech bubble\nconst bubble = document.querySelector(\"#message\");\n// Table\nconst table = document.querySelector(\"#catsweeper\");\n\n// Generate tiles\nlet numTilesRow = 15;\nlet numTilesCol = 15;\n\n// Less tiles if small screen\nif (window.screen.width < 530) {\n  numTilesRow = 10;\n  numTilesCol = 10;\n}\n\n// Create a table of tiles\nconst generateTiles = (row, col) => {\n  for (let i = 0; i < row; i += 1) {\n    table.insertAdjacentHTML(\"beforeend\", '<tr></tr>');\n  }\n\n  const tr = document.querySelectorAll(\"tr\");\n\n  tr.forEach((r) => {\n    for (let j = 0; j < col; j += 1) {\n      r.insertAdjacentHTML(\"beforeend\", '<td class=\"unopened\"></td>');\n    }\n  });\n};\n\ngenerateTiles(numTilesRow, numTilesCol);\n\n// Select all tiles\nconst tdAll = document.querySelectorAll(\"td\");\n\n// Set number of cats\nconst catsRatio = 0.1;\nconst cats = Math.round(catsRatio * (numTilesCol * numTilesRow));\n\n// Create empty 2D tiles array of only 0's\nconst createTilesArray = () => {\n  const tilesArray = [];\n  for (let i = 0; i < numTilesRow; i += 1) {\n    tilesArray[i] = new Array(numTilesCol).fill(0);\n  }\n  return tilesArray;\n};\n\n// Create  random  integer\nconst getRandomInt = (minimum, maximum) => {\n  const min = Math.ceil(minimum);\n  const max = Math.floor(maximum);\n  // The maximum is exclusive and the minimum is inclusive\n  return Math.floor(Math.random() * (max - min) + min);\n};\n\n// Place cats randomly in grid 2d array\nconst catsArray = createTilesArray();\n\nconst createCatsArray = (firstTile) => {\n  // Location of initial clicked tile\n  const rowIndex = firstTile.parentElement.rowIndex;\n  const cellIndex = firstTile.cellIndex;\n  let j = 0;\n  let r;\n  let c;\n  while (j < cats) {\n    r = getRandomInt(0, numTilesRow);\n    c = getRandomInt(0, numTilesCol);\n    // Initial clicked tile should not have a cat\n    if (catsArray[r][c] !== 1 && (rowIndex !== r && cellIndex !== c)) {\n      catsArray[r][c] = 1;\n      j += 1;\n    }\n  }\n};\n\n\n// Index the tile\nconst indexTile = (tile) => {\n  const rowIndex = tile.parentElement.rowIndex;\n  const cellIndex = tile.cellIndex;\n  return [rowIndex, cellIndex];\n};\n\n// Add and remove class name\nconst changeClass = (tile, name, remove) => {\n  tile.classList.add(name);\n  tile.classList.remove(remove);\n};\n\n\nconst checkIfCatOnTile = (row, col, b) => {\n  let catCounter = b;\n  // Does tile exist?\n  if (catsArray[row] && catsArray[row][col]) {\n    if (catsArray[row][col] === 1) {\n      catCounter += 1;\n    }\n  }\n  return catCounter;\n};\n\nconst checkForNeighbouringCats = (tile) => {\n  const indexArray = indexTile(tile);\n  const row = indexArray[0];\n  const col = indexArray[1];\n  let b = 0;\n\n  b = checkIfCatOnTile(row, col - 1, b);\n  b = checkIfCatOnTile(row, col + 1, b);\n  b = checkIfCatOnTile(row - 1, col, b);\n  b = checkIfCatOnTile(row + 1, col, b);\n  b = checkIfCatOnTile(row + 1, col + 1, b);\n  b = checkIfCatOnTile(row - 1, col + 1, b);\n  b = checkIfCatOnTile(row + 1, col - 1, b);\n  b = checkIfCatOnTile(row - 1, col - 1, b);\n\n  changeClass(tile, `cat-neighbour-${b}`, \"unopened\");\n\n  if (b === 0) {\n    changeClass(tile, \"opened\", \"unopened\");\n    return true;\n  }\n};\n\n\nconst checkTileAndNeighbours = (tile) => {\n  // Check the surrounding tile recursion function\n  const checkNextTile = (row, col) => {\n    if (typeof catsArray[row] !== 'undefined' && typeof catsArray[row][col] !== 'undefined') {\n      const nextTile = table.rows[row].cells[col];\n      if (nextTile.classList.contains(\"unopened\") && !nextTile.classList.contains(\"flagged\")) {\n        checkTileAndNeighbours(nextTile);\n      }\n    }\n  };\n\n  const indexArray = indexTile(tile);\n  const row = indexArray[0];\n  const col = indexArray[1];\n  const noCatNeighbours = checkForNeighbouringCats(tile);\n  if (noCatNeighbours === true) {\n    checkNextTile(row, col - 1);\n    checkNextTile(row, col + 1);\n    checkNextTile(row - 1, col);\n    checkNextTile(row + 1, col);\n    checkNextTile(row + 1, col + 1);\n    checkNextTile(row - 1, col + 1);\n    checkNextTile(row + 1, col - 1);\n    checkNextTile(row - 1, col - 1);\n  }\n};\n\nlet time = 1;\nconst timer = document.querySelector(\"#timer\");\n\nconst updateTimer = () => {\n  if (playing === false) {\n    return false;\n  }\n  if (time < 10) {\n    timer.innerHTML = `00${time}`;\n  } else if (time < 100) {\n    timer.innerHTML = `0${time}`;\n  } else if (time < 1000) {\n    timer.innerHTML = `${time}`;\n  }\n  time += 1;\n};\n\nconst startTimer = () => {\n  setInterval(updateTimer, 1000);\n};\n\n\n// Cats left counter\nconst flagsLeftCounter = document.querySelector(\"#flags-left\");\nlet flagsLeft = cats;\n\nconst setFlagsCounter = () => {\n  if (cats < 10) {\n    flagsLeftCounter.innerHTML = `00${cats}`;\n  } else if (cats < 100) {\n    flagsLeftCounter.innerHTML = `0${cats}`;\n  } else {\n    flagsLeftCounter.innerHTML = `${cats}`;\n  }\n};\n\nsetFlagsCounter();\n\nconst updateFlagsCounter = () => {\n  if (flagsLeft > -1) {\n    if (flagsLeft < 10) {\n      flagsLeftCounter.innerHTML = `00${flagsLeft}`;\n    } else if (flagsLeft < 100) {\n      flagsLeftCounter.innerHTML = `0${flagsLeft}`;\n    } else if (flagsLeft < 1000) {\n      flagsLeftCounter.innerHTML = `${flagsLeft}`;\n    }\n  } else if (flagsLeft < 0) {\n    if (flagsLeft > -10) {\n      flagsLeftCounter.innerHTML = `-0${-1 * flagsLeft}`;\n    } else {\n      flagsLeftCounter.innerHTML = `-${-1 * flagsLeft}`;\n    }\n  }\n};\n\n// Check if the user has won the game\nconst checkIfWon = () => {\n  let won = true;\n\n  tdAll.forEach((tile) => {\n    const indexArray = indexTile(tile);\n    const row = indexArray[0];\n    const col = indexArray[1];\n\n    if ((tile.classList.contains(\"unopened\") || tile.classList.contains(\"flagged\")) && catsArray[row][col] !== 1) {\n      won = false;\n      return won;\n    }\n  });\n  return won;\n};\n\n// Add toys to all cats when won\nconst addFlagsWhenWon = () => {\n  tdAll.forEach((tile) => {\n    const indexArray = indexTile(tile);\n    const row = indexArray[0];\n    const col = indexArray[1];\n\n    if (catsArray[row][col] === 1) {\n      changeClass(tile, \"flagged\", \"unopened\");\n    }\n  });\n};\n\n// Show all cats when game over\nconst addCatsWhenGameOver = () => {\n  tdAll.forEach((tile) => {\n    const indexArray = indexTile(tile);\n    const row = indexArray[0];\n    const col = indexArray[1];\n\n    if (catsArray[row][col] === 1) {\n      changeClass(tile, \"cat\", \"unopened\");\n    }\n  });\n};\n\n// --------- Event listeners on all tiles -----------------\ntdAll.forEach((tile) => {\n  // right click event listener\n  tile.addEventListener(\"contextmenu\", (event) => {\n    event.preventDefault();\n\n    // if tile contains toy already, remove the toy\n    if (playing || newGame) {\n      if (tile.classList.contains(\"flagged\")) {\n        changeClass(tile, \"unopened\", \"flagged\");\n        flagsLeft += 1;\n        updateFlagsCounter();\n        // if its unopened without toy, add toy\n      } else if (tile.classList.contains(\"unopened\")) {\n        changeClass(tile, \"flagged\", \"unopened\");\n        flagsLeft -= 1;\n        updateFlagsCounter();\n      }\n    }\n  }, false);\n\n  // mouse down event listener\n  tile.addEventListener(\"mousedown\", (_event) => {\n    if (tile.classList.contains(\"unopened\") && (playing || newGame)) {\n      bubble.innerText = \"Hmm..\";\n    }\n  });\n\n  // mouse up event listener\n  tile.addEventListener(\"mouseup\", (_event) => {\n    if (tile.classList.contains(\"unopened\") && (playing || newGame)) {\n      bubble.innerText = \"Choose a tile\";\n    }\n  });\n\n  // left click event listener\n  tile.addEventListener(\"click\", (event) => {\n    event.preventDefault();\n\n    if (newGame) {\n      if (!playing) {\n        startTimer();\n        createCatsArray(tile);\n      }\n      playing = true;\n\n      // check if tiles has a cat\n      const indexArray = indexTile(tile);\n      const row = indexArray[0];\n      const col = indexArray[1];\n      if (catsArray[row][col] === 1 && !tile.classList.contains(\"flagged\")) {\n        addCatsWhenGameOver();\n        bubble.innerText = \"Game over!\";\n        timer.classList.add(\"bounce-effect\");\n        timer.classList.add(\"bg-red\");\n        playing = false;\n        newGame = false;\n      } else if (tile.classList.contains(\"unopened\") && !tile.classList.contains(\"flagged\")) {\n        checkTileAndNeighbours(tile);\n\n        if (checkIfWon()) {\n          addFlagsWhenWon();\n          bubble.innerText = \"You won!\";\n          timer.classList.add(\"bounce-effect\");\n          timer.classList.add(\"bg-blue\");\n          playing = false;\n          newGame = false;\n        }\n      }\n    }\n  });\n});\n"],"sourceRoot":""}